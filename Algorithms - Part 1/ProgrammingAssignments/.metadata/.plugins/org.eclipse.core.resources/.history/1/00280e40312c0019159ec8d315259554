import java.util.LinkedList;

public class Board {
	private final int[][] board;
	private int n = 0;
	private int hamming = 0;
	private int manhattan = 0;
	
	public Board(int[][] blocks) {
		// construct a board from an n-by-n array of blocks
		// (where blocks[i][j] = block in row i, column j)
		board = copy(blocks);
		n = blocks.length;
		
		//Calculate hamming and manhattan
		hamming = 0;
		manhattan = 0;
		for(int i = 0; i < n; i++){
			for(int j = 0; j < n; j++){
				if(i != n-1 || j != n-1){ // hamming
					if(board[i][j] != (i*n + j + 1)){
						hamming++;
					}
				}
				if(board[i][j] != 0){ // manhattan
					int col = (board[i][j] - 1) % n;
					int row = (board[i][j] - 1) / n;
					manhattan += Math.abs(i-row) + Math.abs(j-col);
				}
			}
		}
	}

	public int dimension() {
		// board dimension n
		return n;
	}
	public int hamming() { 
		// number of blocks out of place
		return hamming;
	}
	public int manhattan()  {
		// sum of Manhattan distances between blocks and goal
		return manhattan;
	}
	public boolean isGoal() {
		// is this board the goal board?
		/*for(int i = 0; i < n; i++){
			for(int j = 0; j < n; j++){
				if(i != n-1 || j != n-1){
					if(board[i][j] != (i*n + j + 1)){
						return false;
					}
				}
			}
		}*/
		return hamming == 0;	
	}
	public Board twin() {
		// a board that is obtained by exchanging any pair of blocks
		int[][] twin = copy(board);//new int[n][n];
		
		for(int i = 0; i < n; i++){
			for(int j = 0; j < n; j++){
				if(board[i][j] != 0){
					for(int l = i; l < n; l++){
						for(int k = j + 1; k < n; k++){
							if(board[l][k] != 0){
								exch(twin, i, j, l, k);
								return new Board(twin);
							}
						}
					}
				}
			}
		}
		return new Board(twin);
		//twin = board.clone();
		/*int rand, row, col, row1, col1;
		do {
			rand = (int) (Math.random() * (n*n));
			row = rand/n;
			col = rand%n;
			//System.out.println(rand + ": " + row + ", " + col + ": " + board[row][col]);
		} while (board[row][col] == 0);

		do {
			rand = (int) (Math.random() * (n*n));
			row1 = rand/n;
			col1 = rand%n;
			//System.out.println(rand + ": " + row1 + ", " + col1 + ": " + board[row1][col1]);
		} while (board[row][col] == board[row1][col1] || board[row1][col1] == 0);*/
		
		//exch(twin, row, col, row1, col1);
		//System.out.println(this + "\n" + new Board(twin));
		//return new Board(twin);

	}
	public boolean equals(Object y) {
		// does this board equal y?
		return (y == null) ? false : y.toString().equals(this.toString());
	}
	public Iterable<Board> neighbors() {
		// all neighboring boards
		LinkedList<Board> neighbors = new LinkedList<Board>();
		int[][] neighbor = copy(board);
		int i = 0, j = 0;
		boolean done = false;
	
		for(; i < n; i++){
			for(j = 0; j < n; j++){
				//System.out.println("ehllo");
				//System.out.println("i: " + i + ", j: " + j + ": " + board[i][j]);
				if(board[i][j] == 0){
					//System.out.println("i: " + i + " j: " + j);
					done = true;
					break;
				}
			}
			if(done){break;}
		}
		//System.out.println(i + ", " + j);

		//System.out.println(i + ", " + j);

		if (j > 0) {
			//System.out.println("A");
			//System.out.println(i + ", " + j);
			exch(neighbor, i, j, i, j - 1);
			
			neighbors.add(new Board(neighbor)); // swap with left
			neighbor = copy(board);
		}
		if (i > 0) {
			//System.out.println("B");
			exch(neighbor, i, j, i - 1, j); // swap with top
			neighbors.add(new Board(neighbor)); // swap with left
			neighbor = copy(board);
		}
		if(j < n - 1) {
			//System.out.println("C");
			exch(neighbor, i, j, i, j + 1); // swap with right
			neighbors.add(new Board(neighbor)); // swap with left
			neighbor = copy(board);
		}
		if(i < n - 1){
			//System.out.println("D");
			exch(neighbor, i, j, i + 1, j); // swap with bottom
			neighbors.add(new Board(neighbor)); // swap with left
			neighbor = copy(board);
		}
		return neighbors;
	}
	public String toString() {
		StringBuilder s = new StringBuilder();
	    s.append(n + "\n");
	    for (int i = 0; i < n; i++) {
	        for (int j = 0; j < n; j++) {
	            s.append(String.format("%2d ", board[i][j]));
	        }
	        s.append("\n");
	    }
	    return s.toString();
	// string representation of this board (in the output format specified below)
	}

	private static void exch(int[][] m, int r1, int c1, int r2, int c2){
		int temp = m[r1][c1];
		m[r1][c1] = m[r2][c2];
		m[r2][c2] = temp;
	}
	private static int[][] copy(int[][] m){
		int[][] result = new int[m.length][m[m.length-1].length];
		for(int i = 0; i < m.length; i++){
			for(int j = 0; j < m[m.length-1].length; j++){
				result[i][j] = m[i][j];
			}
		}
		return result;
	}
	public static void main(String[] args) {
		// unit tests (not graded)
	}
}
