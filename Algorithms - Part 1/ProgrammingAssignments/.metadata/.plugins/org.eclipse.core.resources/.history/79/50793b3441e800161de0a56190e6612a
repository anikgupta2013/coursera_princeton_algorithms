public class Deque<Item> implements Iterable<Item> {
	private Node<Item> first;
	private Node<Item> last;
	private int n; // size
	public Deque(){                           // construct an empty deque
		first = null;
		last = null;
		n = 0;
	}
	
	private class Node<Item>{
		private Item item;
		private Node<Item> next;
	}
	public boolean isEmpty(){                 // is the deque empty?
		return first == null;
	}
	public int size(){                        // return the number of items on the deque
		return n;
	}
	public void addFirst(Item item){          // add the item to the front
		Node<Item> oldFirst = first;
		first = new Node<Item>();
		first.item = item;
		first.next = oldFirst;
	}
	public void addLast(Item item){           // add the item to the end
		Node<Item> oldLast = last;
		last = new Node<Item>();
		last.item = item;
		oldLast.next = last;
	}
	public Item removeFirst(){                // remove and return the item from the front
		
	}
	public Item removeLast(){                 // remove and return the item from the end
		
	}
	public Iterator<Item> iterator(){         // return an iterator over items in order from front to end
		
	}
	public static void main(String[] args){   // unit testing (optional)
	
	}
}